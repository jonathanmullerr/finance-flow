require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe UsersController, type: :controller do
  let(:user) { create(:user) }
  let(:token) { Authentication::JwtService.encode(user_id: user.id) }

  before(:each) do
    request.headers['Authorization'] = "Bearer #{token}"
  end

  describe 'GET #index' do
    it 'returns a success response' do
      get :index
      expect(response).to be_successful
    end
  end

  describe 'GET #show' do
    it 'returns a success response' do
      get :show, params: { id: user.to_param }
      expect(response).to be_successful
    end

    it 'returns the requested user' do
      get :show, params: { id: user.to_param }
      expect(assigns(:user)).to eq(user)
    end
  end

  describe 'POST #create' do
    context 'with valid params' do
      it 'creates a new user' do
        expect do
          post :create, params: attributes_for(:user)
        end.to change(User, :count).by(1)
      end

      it 'returns a created response' do
        post :create, params: attributes_for(:user)
        expect(response).to have_http_status(:created)
      end
    end

    context 'with invalid params' do
      it 'does not create a new user' do
        expect do
          post :create, params: { email: 'invalid_email' }
        end.to change(User, :count).by(0)
      end

      it 'returns an unprocessable_entity response' do
        post :create, params: { email: 'invalid_email' }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe 'PUT #update' do
    context 'with valid params' do
      let(:new_attributes) { { name: 'New Name' } }

      it 'updates the requested user' do
        put :update, params: new_attributes.merge({ id: user.to_param })
        user.reload
        expect(user.name).to eq('New Name')
      end

      it 'returns a success response' do
        put :update, params: new_attributes.merge({ id: user.to_param })
        expect(response).to be_successful
      end
    end

    context 'with invalid params' do
      it 'returns an unprocessable_entity response' do
        put :update, params: { id: user.to_param, email: 'invalid_email' }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe "DELETE #destroy" do
    context "when the entry is destroyed successfully" do
      it "destroys the entry" do
        delete :destroy, params: { id: user.to_param }

        expect { user.reload }.to raise_error(ActiveRecord::RecordNotFound)
      end
    end
  end

  after(:each) do
    User.destroy_all
  end
end
